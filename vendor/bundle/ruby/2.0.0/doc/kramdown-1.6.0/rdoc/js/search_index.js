var search_data = {"index":{"searchIndex":["kramdown","converter","base","html","kramdown","latex","mathengine","itex2mml","mathjax","ritex","pdf","prawndocumentextension","custombox","prawn","text","formatted","removehtmltags","syntaxhighlighter","coderay","rouge","toc","document","element","error","options","boolean","parser","base","gfm","html","constants","elementconverter","parser","kramdown","markdown","utils","configurable","entities","entity","html","orderedhash","stringscanner","unidecoder","rexml","parsers","baseparser","string","===()","[]()","[]=()","a_options()","abbreviation_options()","adapt_source()","add_hard_line_breaks()","add_link()","add_syntax_highlighter_to_class_attr()","add_text()","add_to_toc()","after_block_boundary?()","apply_template_after?()","apply_template_after?()","apply_template_before?()","apply_template_before?()","attr()","attribute_list()","available_width()","before_block_boundary?()","block_hash()","blockquote_options()","br_options()","call()","call()","call()","call()","call()","camelize()","category()","char()","codeblock_options()","codespan_options()","configurable()","configure_parser()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","convert_a()","convert_a()","convert_abbreviation()","convert_abbreviation()","convert_blank()","convert_blank()","convert_blockquote()","convert_blockquote()","convert_br()","convert_br()","convert_codeblock()","convert_codeblock()","convert_codespan()","convert_codespan()","convert_comment()","convert_comment()","convert_dd()","convert_dd()","convert_dl()","convert_dl()","convert_dt()","convert_dt()","convert_em()","convert_em()","convert_entity()","convert_entity()","convert_footnote()","convert_footnote()","convert_header()","convert_header()","convert_hr()","convert_hr()","convert_html_element()","convert_html_element()","convert_img()","convert_img()","convert_li()","convert_li()","convert_math()","convert_math()","convert_ol()","convert_ol()","convert_p()","convert_p()","convert_raw()","convert_raw()","convert_root()","convert_root()","convert_smart_quote()","convert_smart_quote()","convert_standalone_image()","convert_strong()","convert_strong()","convert_table()","convert_table()","convert_tbody()","convert_tbody()","convert_td()","convert_td()","convert_text()","convert_text()","convert_tfoot()","convert_tfoot()","convert_thead()","convert_thead()","convert_tr()","convert_tr()","convert_typographic_sym()","convert_typographic_sym()","convert_ul()","convert_ul()","convert_xml_comment()","convert_xml_comment()","convert_xml_pi()","convert_xml_pi()","correct_abbreviations_attributes()","create_outline()","current_line_number()","data_dir()","dd_options()","decode()","deep_const_get()","defaults()","define()","define_parser()","defined?()","definitions()","delete()","dl_options()","document_options()","dt_options()","each()","em_options()","embed_image()","entity()","entity()","entity_options()","entity_to_latex()","entity_to_str()","escape()","escape_html()","extract_code_language()","extract_code_language!()","extract_string()","finish_document()","footnote_content()","format_as_block_html()","format_as_indented_block_html()","format_as_span_html()","format_math()","generate_id()","generate_toc_tree()","get_template()","handle_extension()","handle_html_start_tag()","handle_kramdown_html_tag()","handle_raw_html_tag()","has_key?()","has_parser?()","header_options()","highlight_code()","hr_options()","html_attributes()","image_floats()","img_options()","in_toc?()","inner()","inner()","inner()","latex_environment()","latex_link_target()","li_options()","math_options()","merge()","merge!()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_block_el()","normalize_abbreviation_key()","normalize_link_id()","obfuscate()","ol_options()","options()","options()","output_header_level()","p_options()","parse()","parse()","parse()","parse()","parse()","parse()","parse_abbrev_definition()","parse_attribute_list()","parse_atx_header()","parse_autolink()","parse_blank_line()","parse_block_extensions()","parse_block_html()","parse_block_math()","parse_blockquote()","parse_blocks()","parse_codeblock()","parse_codeblock_fenced()","parse_codespan()","parse_definition_list()","parse_emphasis()","parse_eob_marker()","parse_escaped_chars()","parse_extension_start_tag()","parse_first_list_line()","parse_footnote_definition()","parse_footnote_marker()","parse_horizontal_rule()","parse_html_attributes()","parse_html_entity()","parse_inline_math()","parse_line_break()","parse_link()","parse_link_definition()","parse_list()","parse_paragraph()","parse_raw_html()","parse_setext_header()","parse_smart_quotes()","parse_span_extensions()","parse_span_html()","parse_spans()","parse_table()","parse_typographic_syms()","parser()","pos=()","prepare_options()","preview_string()","remove_footnotes()","render_a()","render_abbreviation()","render_blockquote()","render_br()","render_codeblock()","render_codespan()","render_dd()","render_dl()","render_dt()","render_em()","render_entity()","render_header()","render_hr()","render_li()","render_math()","render_ol()","render_p()","render_padded_and_formatted_text()","render_root()","render_smart_quote()","render_standalone_image()","render_strong()","render_table()","render_text()","render_typographic_sym()","render_ul()","replace_abbreviations()","reset_env()","restore_env()","revert_pos()","root_options()","save_env()","save_pos()","setup_document()","simple_array_validator()","simple_hash_validator()","smart_quote_entity()","smart_quote_options()","snake_case()","span_parser_regexps()","str_to_sym()","strong_options()","table_options()","text_hash()","text_options()","try_require()","typographic_sym_options()","ul_options()","update_attr_with_ial()","update_ial_with_ial()","update_link_definitions()","update_raw_header_text()","update_tree()","warning()","warning()","with_block_padding()"],"longSearchIndex":["kramdown","kramdown::converter","kramdown::converter::base","kramdown::converter::html","kramdown::converter::kramdown","kramdown::converter::latex","kramdown::converter::mathengine","kramdown::converter::mathengine::itex2mml","kramdown::converter::mathengine::mathjax","kramdown::converter::mathengine::ritex","kramdown::converter::pdf","kramdown::converter::pdf::prawndocumentextension","kramdown::converter::pdf::prawndocumentextension::custombox","kramdown::converter::pdf::prawndocumentextension::prawn","kramdown::converter::pdf::prawndocumentextension::prawn::text","kramdown::converter::pdf::prawndocumentextension::prawn::text::formatted","kramdown::converter::removehtmltags","kramdown::converter::syntaxhighlighter","kramdown::converter::syntaxhighlighter::coderay","kramdown::converter::syntaxhighlighter::rouge","kramdown::converter::toc","kramdown::document","kramdown::element","kramdown::error","kramdown::options","kramdown::options::boolean","kramdown::parser","kramdown::parser::base","kramdown::parser::gfm","kramdown::parser::html","kramdown::parser::html::constants","kramdown::parser::html::elementconverter","kramdown::parser::html::parser","kramdown::parser::kramdown","kramdown::parser::markdown","kramdown::utils","kramdown::utils::configurable","kramdown::utils::entities","kramdown::utils::entities::entity","kramdown::utils::html","kramdown::utils::orderedhash","kramdown::utils::stringscanner","kramdown::utils::unidecoder","rexml","rexml::parsers","rexml::parsers::baseparser","string","kramdown::options::boolean::===()","kramdown::utils::orderedhash#[]()","kramdown::utils::orderedhash#[]=()","kramdown::converter::pdf#a_options()","kramdown::converter::pdf#abbreviation_options()","kramdown::parser::base#adapt_source()","kramdown::parser::gfm#add_hard_line_breaks()","kramdown::parser::kramdown#add_link()","kramdown::converter::html#add_syntax_highlighter_to_class_attr()","kramdown::parser::base#add_text()","kramdown::converter::toc#add_to_toc()","kramdown::parser::kramdown#after_block_boundary?()","kramdown::converter::base#apply_template_after?()","kramdown::converter::pdf#apply_template_after?()","kramdown::converter::base#apply_template_before?()","kramdown::converter::pdf#apply_template_before?()","kramdown::element#attr()","kramdown::converter::latex#attribute_list()","kramdown::converter::pdf::prawndocumentextension::custombox#available_width()","kramdown::parser::kramdown#before_block_boundary?()","kramdown::converter::pdf#block_hash()","kramdown::converter::pdf#blockquote_options()","kramdown::converter::pdf#br_options()","kramdown::converter::mathengine::itex2mml::call()","kramdown::converter::mathengine::mathjax::call()","kramdown::converter::mathengine::ritex::call()","kramdown::converter::syntaxhighlighter::coderay::call()","kramdown::converter::syntaxhighlighter::rouge::call()","kramdown::utils::camelize()","kramdown::element::category()","kramdown::utils::entities::entity#char()","kramdown::converter::pdf#codeblock_options()","kramdown::converter::pdf#codespan_options()","kramdown::utils::configurable#configurable()","kramdown::parser::kramdown#configure_parser()","kramdown::converter::base#convert()","kramdown::converter::base::convert()","kramdown::converter::html#convert()","kramdown::converter::latex#convert()","kramdown::converter::pdf#convert()","kramdown::converter::removehtmltags#convert()","kramdown::converter::toc#convert()","kramdown::converter::html#convert_a()","kramdown::converter::latex#convert_a()","kramdown::converter::html#convert_abbreviation()","kramdown::converter::latex#convert_abbreviation()","kramdown::converter::html#convert_blank()","kramdown::converter::latex#convert_blank()","kramdown::converter::html#convert_blockquote()","kramdown::converter::latex#convert_blockquote()","kramdown::converter::html#convert_br()","kramdown::converter::latex#convert_br()","kramdown::converter::html#convert_codeblock()","kramdown::converter::latex#convert_codeblock()","kramdown::converter::html#convert_codespan()","kramdown::converter::latex#convert_codespan()","kramdown::converter::html#convert_comment()","kramdown::converter::latex#convert_comment()","kramdown::converter::html#convert_dd()","kramdown::converter::latex#convert_dd()","kramdown::converter::html#convert_dl()","kramdown::converter::latex#convert_dl()","kramdown::converter::html#convert_dt()","kramdown::converter::latex#convert_dt()","kramdown::converter::html#convert_em()","kramdown::converter::latex#convert_em()","kramdown::converter::html#convert_entity()","kramdown::converter::latex#convert_entity()","kramdown::converter::html#convert_footnote()","kramdown::converter::latex#convert_footnote()","kramdown::converter::html#convert_header()","kramdown::converter::latex#convert_header()","kramdown::converter::html#convert_hr()","kramdown::converter::latex#convert_hr()","kramdown::converter::html#convert_html_element()","kramdown::converter::latex#convert_html_element()","kramdown::converter::html#convert_img()","kramdown::converter::latex#convert_img()","kramdown::converter::html#convert_li()","kramdown::converter::latex#convert_li()","kramdown::converter::html#convert_math()","kramdown::converter::latex#convert_math()","kramdown::converter::html#convert_ol()","kramdown::converter::latex#convert_ol()","kramdown::converter::html#convert_p()","kramdown::converter::latex#convert_p()","kramdown::converter::html#convert_raw()","kramdown::converter::latex#convert_raw()","kramdown::converter::html#convert_root()","kramdown::converter::latex#convert_root()","kramdown::converter::html#convert_smart_quote()","kramdown::converter::latex#convert_smart_quote()","kramdown::converter::latex#convert_standalone_image()","kramdown::converter::html#convert_strong()","kramdown::converter::latex#convert_strong()","kramdown::converter::html#convert_table()","kramdown::converter::latex#convert_table()","kramdown::converter::html#convert_tbody()","kramdown::converter::latex#convert_tbody()","kramdown::converter::html#convert_td()","kramdown::converter::latex#convert_td()","kramdown::converter::html#convert_text()","kramdown::converter::latex#convert_text()","kramdown::converter::html#convert_tfoot()","kramdown::converter::latex#convert_tfoot()","kramdown::converter::html#convert_thead()","kramdown::converter::latex#convert_thead()","kramdown::converter::html#convert_tr()","kramdown::converter::latex#convert_tr()","kramdown::converter::html#convert_typographic_sym()","kramdown::converter::latex#convert_typographic_sym()","kramdown::converter::html#convert_ul()","kramdown::converter::latex#convert_ul()","kramdown::converter::html#convert_xml_comment()","kramdown::converter::latex#convert_xml_comment()","kramdown::converter::html#convert_xml_pi()","kramdown::converter::latex#convert_xml_pi()","kramdown::parser::kramdown#correct_abbreviations_attributes()","kramdown::converter::pdf#create_outline()","kramdown::utils::stringscanner#current_line_number()","kramdown::data_dir()","kramdown::converter::pdf#dd_options()","kramdown::utils::unidecoder::decode()","kramdown::utils::deep_const_get()","kramdown::options::defaults()","kramdown::options::define()","kramdown::parser::kramdown::define_parser()","kramdown::options::defined?()","kramdown::options::definitions()","kramdown::utils::orderedhash#delete()","kramdown::converter::pdf#dl_options()","kramdown::converter::pdf#document_options()","kramdown::converter::pdf#dt_options()","kramdown::utils::orderedhash#each()","kramdown::converter::pdf#em_options()","kramdown::converter::pdf::prawndocumentextension#embed_image()","kramdown::utils::entities::entity()","kramdown::utils::entities#entity()","kramdown::converter::pdf#entity_options()","kramdown::converter::latex#entity_to_latex()","kramdown::utils::html#entity_to_str()","kramdown::converter::latex#escape()","kramdown::utils::html#escape_html()","kramdown::converter::base#extract_code_language()","kramdown::converter::base#extract_code_language!()","kramdown::parser::base#extract_string()","kramdown::converter::pdf#finish_document()","kramdown::converter::html#footnote_content()","kramdown::converter::html#format_as_block_html()","kramdown::converter::html#format_as_indented_block_html()","kramdown::converter::html#format_as_span_html()","kramdown::converter::base#format_math()","kramdown::converter::base#generate_id()","kramdown::converter::html#generate_toc_tree()","kramdown::converter::base::get_template()","kramdown::parser::kramdown#handle_extension()","kramdown::parser::html::parser#handle_html_start_tag()","kramdown::parser::kramdown#handle_kramdown_html_tag()","kramdown::parser::html::parser#handle_raw_html_tag()","kramdown::utils::orderedhash#has_key?()","kramdown::parser::kramdown::has_parser?()","kramdown::converter::pdf#header_options()","kramdown::converter::base#highlight_code()","kramdown::converter::pdf#hr_options()","kramdown::utils::html#html_attributes()","kramdown::converter::pdf::prawndocumentextension#image_floats()","kramdown::converter::pdf#img_options()","kramdown::converter::base#in_toc?()","kramdown::converter::html#inner()","kramdown::converter::latex#inner()","kramdown::converter::pdf#inner()","kramdown::converter::latex#latex_environment()","kramdown::converter::latex#latex_link_target()","kramdown::converter::pdf#li_options()","kramdown::converter::pdf#math_options()","kramdown::options::merge()","kramdown::utils::orderedhash#merge!()","kramdown::document#method_missing()","kramdown::converter::base::new()","kramdown::converter::html::new()","kramdown::converter::latex::new()","kramdown::converter::pdf::new()","kramdown::converter::removehtmltags::new()","kramdown::converter::toc::new()","kramdown::document::new()","kramdown::element::new()","kramdown::parser::base::new()","kramdown::parser::gfm::new()","kramdown::parser::kramdown::new()","kramdown::parser::kramdown::new()","kramdown::utils::orderedhash::new()","kramdown::utils::stringscanner::new()","kramdown::parser::kramdown#new_block_el()","kramdown::converter::latex#normalize_abbreviation_key()","kramdown::parser::kramdown#normalize_link_id()","kramdown::converter::html#obfuscate()","kramdown::converter::pdf#ol_options()","kramdown::converter::syntaxhighlighter::coderay::options()","kramdown::element#options()","kramdown::converter::base#output_header_level()","kramdown::converter::pdf#p_options()","kramdown::options::parse()","kramdown::parser::base::parse()","kramdown::parser::base#parse()","kramdown::parser::gfm#parse()","kramdown::parser::html#parse()","kramdown::parser::kramdown#parse()","kramdown::parser::kramdown#parse_abbrev_definition()","kramdown::parser::kramdown#parse_attribute_list()","kramdown::parser::kramdown#parse_atx_header()","kramdown::parser::kramdown#parse_autolink()","kramdown::parser::kramdown#parse_blank_line()","kramdown::parser::kramdown#parse_block_extensions()","kramdown::parser::kramdown#parse_block_html()","kramdown::parser::kramdown#parse_block_math()","kramdown::parser::kramdown#parse_blockquote()","kramdown::parser::kramdown#parse_blocks()","kramdown::parser::kramdown#parse_codeblock()","kramdown::parser::kramdown#parse_codeblock_fenced()","kramdown::parser::kramdown#parse_codespan()","kramdown::parser::kramdown#parse_definition_list()","kramdown::parser::kramdown#parse_emphasis()","kramdown::parser::kramdown#parse_eob_marker()","kramdown::parser::kramdown#parse_escaped_chars()","kramdown::parser::kramdown#parse_extension_start_tag()","kramdown::parser::kramdown#parse_first_list_line()","kramdown::parser::kramdown#parse_footnote_definition()","kramdown::parser::kramdown#parse_footnote_marker()","kramdown::parser::kramdown#parse_horizontal_rule()","kramdown::parser::html::parser#parse_html_attributes()","kramdown::parser::kramdown#parse_html_entity()","kramdown::parser::kramdown#parse_inline_math()","kramdown::parser::kramdown#parse_line_break()","kramdown::parser::kramdown#parse_link()","kramdown::parser::kramdown#parse_link_definition()","kramdown::parser::kramdown#parse_list()","kramdown::parser::kramdown#parse_paragraph()","kramdown::parser::html::parser#parse_raw_html()","kramdown::parser::kramdown#parse_setext_header()","kramdown::parser::kramdown#parse_smart_quotes()","kramdown::parser::kramdown#parse_span_extensions()","kramdown::parser::kramdown#parse_span_html()","kramdown::parser::kramdown#parse_spans()","kramdown::parser::kramdown#parse_table()","kramdown::parser::kramdown#parse_typographic_syms()","kramdown::parser::kramdown::parser()","kramdown::utils::stringscanner#pos=()","kramdown::converter::syntaxhighlighter::coderay::prepare_options()","kramdown::converter::mathengine::mathjax::preview_string()","kramdown::converter::html#remove_footnotes()","kramdown::converter::pdf#render_a()","kramdown::converter::pdf#render_abbreviation()","kramdown::converter::pdf#render_blockquote()","kramdown::converter::pdf#render_br()","kramdown::converter::pdf#render_codeblock()","kramdown::converter::pdf#render_codespan()","kramdown::converter::pdf#render_dd()","kramdown::converter::pdf#render_dl()","kramdown::converter::pdf#render_dt()","kramdown::converter::pdf#render_em()","kramdown::converter::pdf#render_entity()","kramdown::converter::pdf#render_header()","kramdown::converter::pdf#render_hr()","kramdown::converter::pdf#render_li()","kramdown::converter::pdf#render_math()","kramdown::converter::pdf#render_ol()","kramdown::converter::pdf#render_p()","kramdown::converter::pdf#render_padded_and_formatted_text()","kramdown::converter::pdf#render_root()","kramdown::converter::pdf#render_smart_quote()","kramdown::converter::pdf#render_standalone_image()","kramdown::converter::pdf#render_strong()","kramdown::converter::pdf#render_table()","kramdown::converter::pdf#render_text()","kramdown::converter::pdf#render_typographic_sym()","kramdown::converter::pdf#render_ul()","kramdown::parser::kramdown#replace_abbreviations()","kramdown::parser::kramdown#reset_env()","kramdown::parser::kramdown#restore_env()","kramdown::utils::stringscanner#revert_pos()","kramdown::converter::pdf#root_options()","kramdown::parser::kramdown#save_env()","kramdown::utils::stringscanner#save_pos()","kramdown::converter::pdf#setup_document()","kramdown::options::simple_array_validator()","kramdown::options::simple_hash_validator()","kramdown::converter::base#smart_quote_entity()","kramdown::converter::pdf#smart_quote_options()","kramdown::utils::snake_case()","kramdown::parser::kramdown#span_parser_regexps()","kramdown::options::str_to_sym()","kramdown::converter::pdf#strong_options()","kramdown::converter::pdf#table_options()","kramdown::converter::pdf#text_hash()","kramdown::converter::pdf#text_options()","kramdown::document#try_require()","kramdown::converter::pdf#typographic_sym_options()","kramdown::converter::pdf#ul_options()","kramdown::parser::kramdown#update_attr_with_ial()","kramdown::parser::kramdown#update_ial_with_ial()","kramdown::parser::kramdown#update_link_definitions()","kramdown::parser::kramdown#update_raw_header_text()","kramdown::parser::kramdown#update_tree()","kramdown::converter::base#warning()","kramdown::parser::base#warning()","kramdown::converter::pdf#with_block_padding()"],"info":[["Kramdown","","Kramdown.html","","<p>TODO: use [[:alpha:]] in all regexp to allow parsing of international\nvalues in 1.9.1 NOTE: use @src.pre_match …\n"],["Kramdown::Converter","","Kramdown/Converter.html","","<p>This module contains all available converters, i.e. classes that take a\nroot Element and convert it to …\n"],["Kramdown::Converter::Base","","Kramdown/Converter/Base.html","","<p>Base class for converters\n<p>This class serves as base class for all converters. It provides methods\nthat …\n"],["Kramdown::Converter::Html","","Kramdown/Converter/Html.html","","<p>Converts a Kramdown::Document to HTML.\n<p>You can customize the HTML converter by sub-classing it and overriding …\n"],["Kramdown::Converter::Kramdown","","Kramdown/Converter/Kramdown.html","","<p>Converts an element tree to the kramdown format.\n"],["Kramdown::Converter::Latex","","Kramdown/Converter/Latex.html","","<p>Converts an element tree to LaTeX.\n<p>This converter uses ideas from other Markdown-to-LaTeX converters like …\n"],["Kramdown::Converter::MathEngine","","Kramdown/Converter/MathEngine.html","",""],["Kramdown::Converter::MathEngine::Itex2MML","","Kramdown/Converter/MathEngine/Itex2MML.html","","<p>Uses the Itex2MML library for converting math formulas to MathML.\n"],["Kramdown::Converter::MathEngine::Mathjax","","Kramdown/Converter/MathEngine/Mathjax.html","","<p>Uses the MathJax javascript library for displaying math.\n<p>Note that the javascript library itself is not …\n"],["Kramdown::Converter::MathEngine::Ritex","","Kramdown/Converter/MathEngine/Ritex.html","","<p>Uses the Ritex library for converting math formulas to MathML.\n"],["Kramdown::Converter::Pdf","","Kramdown/Converter/Pdf.html","","<p>Converts an element tree to a PDF using the prawn PDF library.\n<p>This basic version provides a nice starting …\n"],["Kramdown::Converter::Pdf::PrawnDocumentExtension","","Kramdown/Converter/Pdf/PrawnDocumentExtension.html","","<p>This module gets mixed into the Prawn::Document instance.\n"],["Kramdown::Converter::Pdf::PrawnDocumentExtension::CustomBox","","Kramdown/Converter/Pdf/PrawnDocumentExtension/CustomBox.html","","<p>Extension for the formatted box class to recognize images and move text\naround them.\n"],["Kramdown::Converter::Pdf::PrawnDocumentExtension::Prawn","","Kramdown/Converter/Pdf/PrawnDocumentExtension/Prawn.html","",""],["Kramdown::Converter::Pdf::PrawnDocumentExtension::Prawn::Text","","Kramdown/Converter/Pdf/PrawnDocumentExtension/Prawn/Text.html","",""],["Kramdown::Converter::Pdf::PrawnDocumentExtension::Prawn::Text::Formatted","","Kramdown/Converter/Pdf/PrawnDocumentExtension/Prawn/Text/Formatted.html","",""],["Kramdown::Converter::RemoveHtmlTags","","Kramdown/Converter/RemoveHtmlTags.html","","<p>Removes all block (and optionally span) level HTML tags from the element\ntree.\n<p>This converter can be used …\n"],["Kramdown::Converter::SyntaxHighlighter","","Kramdown/Converter/SyntaxHighlighter.html","","<p>Container for Syntax Highlighters\n<p>This module serves as container for the syntax highlighters that can …\n"],["Kramdown::Converter::SyntaxHighlighter::Coderay","","Kramdown/Converter/SyntaxHighlighter/Coderay.html","","<p>Uses Coderay to highlight code blocks and code spans.\n"],["Kramdown::Converter::SyntaxHighlighter::Rouge","","Kramdown/Converter/SyntaxHighlighter/Rouge.html","","<p>Uses Rouge which is CSS-compatible to Pygments to highlight code blocks and\ncode spans.\n"],["Kramdown::Converter::Toc","","Kramdown/Converter/Toc.html","","<p>Converts a Kramdown::Document to an element tree that represents the table\nof contents.\n<p>The returned tree …\n"],["Kramdown::Document","","Kramdown/Document.html","","<p>The main interface to kramdown.\n<p>This class provides a one-stop-shop for using kramdown to convert text …\n"],["Kramdown::Element","","Kramdown/Element.html","","<p>Represents all elements in the element tree.\n<p>kramdown only uses this one class for representing all available …\n"],["Kramdown::Error","","Kramdown/Error.html","","<p>This error is raised when an error condition is encountered.\n<p><strong>Note</strong> that this error is only raised by the …\n"],["Kramdown::Options","","Kramdown/Options.html","","<p>This module defines all options that are used by parsers and/or converters\nas well as providing methods …\n"],["Kramdown::Options::Boolean","","Kramdown/Options/Boolean.html","","<p>Helper class introducing a boolean type for specifying boolean values\n(<code>true</code> and <code>false</code>) as option types. …\n"],["Kramdown::Parser","","Kramdown/Parser.html","","<p>This module contains all available parsers. A parser takes an input string\nand converts the string to …\n"],["Kramdown::Parser::Base","","Kramdown/Parser/Base.html","","<p>Base class for parsers\n<p>This class serves as base class for parsers. It provides common methods\nthat can/should …\n"],["Kramdown::Parser::GFM","","Kramdown/Parser/GFM.html","",""],["Kramdown::Parser::Html","","Kramdown/Parser/Html.html","","<p>Used for parsing a HTML document.\n<p>The parsing code is in the Parser module that can also be used by other …\n"],["Kramdown::Parser::Html::Constants","","Kramdown/Parser/Html/Constants.html","","<p>Contains all constants that are used when parsing.\n"],["Kramdown::Parser::Html::ElementConverter","","Kramdown/Parser/Html/ElementConverter.html","","<p>Converts HTML elements to native elements if possible.\n"],["Kramdown::Parser::Html::Parser","","Kramdown/Parser/Html/Parser.html","","<p>Contains the parsing methods. This module can be mixed into any parser to\nget HTML parsing functionality. …\n"],["Kramdown::Parser::Kramdown","","Kramdown/Parser/Kramdown.html","","<p>Used for parsing a document in kramdown format.\n<p>If you want to extend the functionality of the parser, …\n"],["Kramdown::Parser::Markdown","","Kramdown/Parser/Markdown.html","","<p>Used for parsing a document in Markdown format.\n<p>This parser is based on the kramdown parser and removes …\n"],["Kramdown::Utils","","Kramdown/Utils.html","","<p>Utils Module\n<p>This module contains utility class/modules/methods that can be used by both\nparsers and converters. …\n"],["Kramdown::Utils::Configurable","","Kramdown/Utils/Configurable.html","","<p>Methods for registering configurable extensions.\n"],["Kramdown::Utils::Entities","","Kramdown/Utils/Entities.html","","<p>Provides convenience methods for handling named and numeric entities.\n"],["Kramdown::Utils::Entities::Entity","","Kramdown/Utils/Entities/Entity.html","","<p>Represents an entity that has a <code>code_point</code> and\n<code>name</code>.\n"],["Kramdown::Utils::Html","","Kramdown/Utils/Html.html","","<p>Provides convenience methods for HTML related tasks.\n<p><strong>Note</strong> that this module has to be mixed into a class …\n"],["Kramdown::Utils::OrderedHash","","Kramdown/Utils/OrderedHash.html","","<p>A partial hash implementation which preserves the insertion order of the\nkeys.\n<p><strong>Note</strong> that this class is …\n"],["Kramdown::Utils::StringScanner","","Kramdown/Utils/StringScanner.html","","<p>This patched StringScanner adds line number information for current scan\nposition and a start_line_number …\n"],["Kramdown::Utils::Unidecoder","","Kramdown/Utils/Unidecoder.html","","<p>Provides the ability to tranliterate Unicode strings into plain ASCII ones.\n"],["REXML","","REXML.html","",""],["REXML::Parsers","","REXML/Parsers.html","",""],["REXML::Parsers::BaseParser","","REXML/Parsers/BaseParser.html","",""],["String","","String.html","",""],["===","Kramdown::Options::Boolean","Kramdown/Options/Boolean.html#method-c-3D-3D-3D","(other)","<p>Return <code>true</code> if <code>other</code> is either <code>true</code>\nor <code>false</code>\n"],["[]","Kramdown::Utils::OrderedHash","Kramdown/Utils/OrderedHash.html#method-i-5B-5D","(key)","<p>Return the value for the <code>key</code>.\n"],["[]=","Kramdown::Utils::OrderedHash","Kramdown/Utils/OrderedHash.html#method-i-5B-5D-3D","(key, val)","<p>Set the value for the <code>key</code> to <code>val</code>.\n"],["a_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-a_options","(el, opts)",""],["abbreviation_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-abbreviation_options","(el, opts)",""],["adapt_source","Kramdown::Parser::Base","Kramdown/Parser/Base.html#method-i-adapt_source","(source)","<p>Modify the string <code>source</code> to be usable by the parser (unifies\nline ending characters to <code>\\n</code> and makes sure …\n"],["add_hard_line_breaks","Kramdown::Parser::GFM","Kramdown/Parser/GFM.html#method-i-add_hard_line_breaks","(element)",""],["add_link","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-add_link","(el, href, title, alt_text = nil, ial = nil)","<p>This helper methods adds the approriate attributes to the element\n<code>el</code> of type <code>a</code> or <code>img</code> and the element\n…\n"],["add_syntax_highlighter_to_class_attr","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-add_syntax_highlighter_to_class_attr","(attr)","<p>Add the syntax highlighter name to the &#39;class&#39; attribute of the\ngiven attribute hash.\n"],["add_text","Kramdown::Parser::Base","Kramdown/Parser/Base.html#method-i-add_text","(text, tree = @tree, type = @text_type)","<p>This helper method adds the given <code>text</code> either to the last\nelement in the <code>tree</code> if it is a <code>type</code> element …\n"],["add_to_toc","Kramdown::Converter::Toc","Kramdown/Converter/Toc.html#method-i-add_to_toc","(el, id)",""],["after_block_boundary?","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-after_block_boundary-3F","()","<p>Return <code>true</code> if we are after a block boundary.\n"],["apply_template_after?","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-i-apply_template_after-3F","()","<p>Returns whether the template should be applied ater the conversion of the\ntree.\n<p>Defaults to true.\n"],["apply_template_after?","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-apply_template_after-3F","()","<p>Returns <code>false</code>.\n"],["apply_template_before?","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-i-apply_template_before-3F","()","<p>Returns whether the template should be applied before the conversion of the\ntree.\n<p>Defaults to false.\n"],["apply_template_before?","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-apply_template_before-3F","()","<p>PDF templates are applied before conversion. They should contain code to\naugment the converter object …\n"],["attr","Kramdown::Element","Kramdown/Element.html#method-i-attr","()","<p>The attributes of the element. Uses an Utils::OrderedHash to retain the\ninsertion order.\n"],["attribute_list","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-attribute_list","(el)","<p>Return a LaTeX comment containing all attributes as &#39;key=“value”&#39;\npairs.\n"],["available_width","Kramdown::Converter::Pdf::PrawnDocumentExtension::CustomBox","Kramdown/Converter/Pdf/PrawnDocumentExtension/CustomBox.html#method-i-available_width","()",""],["before_block_boundary?","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-before_block_boundary-3F","()","<p>Return <code>true</code> if we are before a block boundary.\n"],["block_hash","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-block_hash","(opts)","<p>Helper function that returns a hash with valid options for the prawn\n#text_box extracted from the given …\n"],["blockquote_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-blockquote_options","(el, opts)",""],["br_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-br_options","(el, opts)",""],["call","Kramdown::Converter::MathEngine::Itex2MML","Kramdown/Converter/MathEngine/Itex2MML.html#method-c-call","(converter, el, opts)",""],["call","Kramdown::Converter::MathEngine::Mathjax","Kramdown/Converter/MathEngine/Mathjax.html#method-c-call","(converter, el, opts)",""],["call","Kramdown::Converter::MathEngine::Ritex","Kramdown/Converter/MathEngine/Ritex.html#method-c-call","(converter, el, opts)",""],["call","Kramdown::Converter::SyntaxHighlighter::Coderay","Kramdown/Converter/SyntaxHighlighter/Coderay.html#method-c-call","(converter, text, lang, type, _unused_opts)",""],["call","Kramdown::Converter::SyntaxHighlighter::Rouge","Kramdown/Converter/SyntaxHighlighter/Rouge.html#method-c-call","(converter, text, lang, type, _unused_opts)",""],["camelize","Kramdown::Utils","Kramdown/Utils.html#method-c-camelize","(name)","<p>Treat <code>name</code> as if it were snake cased (e.g. snake_case) and\ncamelize it (e.g. SnakeCase).\n"],["category","Kramdown::Element","Kramdown/Element.html#method-c-category","(el)","<p>Return the category of <code>el</code> which can be :block, :span or\n<code>nil</code>.\n<p>Most elements have a fixed category, however, …\n"],["char","Kramdown::Utils::Entities::Entity","Kramdown/Utils/Entities/Entity.html#method-i-char","()","<p>Return the UTF8 representation of the entity.\n"],["codeblock_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-codeblock_options","(el, opts)",""],["codespan_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-codespan_options","(el, opts)",""],["configurable","Kramdown::Utils::Configurable","Kramdown/Utils/Configurable.html#method-i-configurable","(name)","<p>Create a new configurable extension called <code>name</code>.\n<p>Three methods will be defined on the calling object which …\n"],["configure_parser","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-configure_parser","()","<p>Adapt the object to allow parsing like specified in the options.\n"],["convert","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-i-convert","(el)","<p>Convert the element <code>el</code> and return the resulting object.\n<p>This is the only method that has to be implemented …\n"],["convert","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-c-convert","(tree, options = {})","<p>Convert the element tree <code>tree</code> and return the resulting\nconversion object (normally a string) and an array …\n"],["convert","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert","(el, indent = -@indent)","<p>Dispatch the conversion of the element <code>el</code> to a\n<code>convert_TYPE</code> method using the <code>type</code> of the\nelement.\n"],["convert","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert","(el, opts = {})","<p>Dispatch the conversion of the element <code>el</code> to a\n<code>convert_TYPE</code> method using the <code>type</code> of the\nelement.\n"],["convert","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-convert","(el, opts = {})","<p>Invoke the special rendering method for the given element <code>el</code>.\n<p>A PDF destination is also added at the current …\n"],["convert","Kramdown::Converter::RemoveHtmlTags","Kramdown/Converter/RemoveHtmlTags.html#method-i-convert","(el)",""],["convert","Kramdown::Converter::Toc","Kramdown/Converter/Toc.html#method-i-convert","(el)",""],["convert_a","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_a","(el, indent)",""],["convert_a","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_a","(el, opts)",""],["convert_abbreviation","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_abbreviation","(el, indent)",""],["convert_abbreviation","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_abbreviation","(el, opts)",""],["convert_blank","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_blank","(el, indent)",""],["convert_blank","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_blank","(el, opts)",""],["convert_blockquote","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_blockquote","(el, indent)",""],["convert_blockquote","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_blockquote","(el, opts)",""],["convert_br","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_br","(el, indent)",""],["convert_br","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_br","(el, opts)",""],["convert_codeblock","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_codeblock","(el, indent)",""],["convert_codeblock","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_codeblock","(el, opts)",""],["convert_codespan","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_codespan","(el, indent)",""],["convert_codespan","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_codespan","(el, opts)",""],["convert_comment","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_comment","(el, indent)",""],["convert_comment","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_comment","(el, opts)",""],["convert_dd","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_dd","(el, indent)",""],["convert_dd","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_dd","(el, opts)",""],["convert_dl","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_dl","(el, indent)",""],["convert_dl","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_dl","(el, opts)",""],["convert_dt","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_dt","(el, indent)",""],["convert_dt","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_dt","(el, opts)",""],["convert_em","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_em","(el, indent)",""],["convert_em","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_em","(el, opts)",""],["convert_entity","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_entity","(el, indent)",""],["convert_entity","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_entity","(el, opts)",""],["convert_footnote","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_footnote","(el, indent)",""],["convert_footnote","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_footnote","(el, opts)",""],["convert_header","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_header","(el, indent)",""],["convert_header","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_header","(el, opts)",""],["convert_hr","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_hr","(el, indent)",""],["convert_hr","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_hr","(el, opts)",""],["convert_html_element","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_html_element","(el, indent)",""],["convert_html_element","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_html_element","(el, opts)",""],["convert_img","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_img","(el, indent)",""],["convert_img","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_img","(el, opts)",""],["convert_li","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_li","(el, indent)",""],["convert_li","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_li","(el, opts)",""],["convert_math","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_math","(el, indent)",""],["convert_math","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_math","(el, opts)",""],["convert_ol","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_ol","(el, indent)",""],["convert_ol","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_ol","(el, opts)",""],["convert_p","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_p","(el, indent)",""],["convert_p","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_p","(el, opts)",""],["convert_raw","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_raw","(el, indent)",""],["convert_raw","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_raw","(el, opts)",""],["convert_root","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_root","(el, indent)",""],["convert_root","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_root","(el, opts)",""],["convert_smart_quote","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_smart_quote","(el, indent)",""],["convert_smart_quote","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_smart_quote","(el, opts)",""],["convert_standalone_image","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_standalone_image","(el, opts, img)","<p>Helper method used by <code>convert_p</code> to convert a paragraph that\nonly contains a single :img element.\n"],["convert_strong","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_strong","(el, indent)",""],["convert_strong","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_strong","(el, opts)",""],["convert_table","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_table","(el, indent)",""],["convert_table","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_table","(el, opts)",""],["convert_tbody","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_tbody","(el, indent)",""],["convert_tbody","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_tbody","(el, opts)",""],["convert_td","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_td","(el, indent)",""],["convert_td","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_td","(el, opts)",""],["convert_text","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_text","(el, indent)",""],["convert_text","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_text","(el, opts)",""],["convert_tfoot","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_tfoot","(el, indent)",""],["convert_tfoot","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_tfoot","(el, opts)",""],["convert_thead","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_thead","(el, indent)",""],["convert_thead","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_thead","(el, opts)",""],["convert_tr","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_tr","(el, indent)",""],["convert_tr","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_tr","(el, opts)",""],["convert_typographic_sym","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_typographic_sym","(el, indent)",""],["convert_typographic_sym","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_typographic_sym","(el, opts)",""],["convert_ul","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_ul","(el, indent)",""],["convert_ul","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_ul","(el, opts)",""],["convert_xml_comment","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_xml_comment","(el, indent)",""],["convert_xml_comment","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_xml_comment","(el, opts)",""],["convert_xml_pi","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-convert_xml_pi","(el, indent)",""],["convert_xml_pi","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-convert_xml_pi","(el, opts)",""],["correct_abbreviations_attributes","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-correct_abbreviations_attributes","()","<p>Correct abbreviation attributes.\n"],["create_outline","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-create_outline","(root)","<p>Create the PDF outline from the header elements in the TOC.\n"],["current_line_number","Kramdown::Utils::StringScanner","Kramdown/Utils/StringScanner.html#method-i-current_line_number","()","<p>Returns the line number for current charpos.\n<p>NOTE: Requires that all line endings are normalized to &#39;n&#39; …\n"],["data_dir","Kramdown","Kramdown.html#method-c-data_dir","()","<p>Return the data directory for kramdown.\n"],["dd_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-dd_options","(el, opts)",""],["decode","Kramdown::Utils::Unidecoder","Kramdown/Utils/Unidecoder.html#method-c-decode","(string)",""],["deep_const_get","Kramdown::Utils","Kramdown/Utils.html#method-c-deep_const_get","(str)","<p>Resolve the recursive constant <code>str</code>.\n"],["defaults","Kramdown::Options","Kramdown/Options.html#method-c-defaults","()","<p>Return a Hash with the default values for all options.\n"],["define","Kramdown::Options","Kramdown/Options.html#method-c-define","(name, type, default, desc, &block)","<p>Define a new option called <code>name</code> (a Symbol) with the given\n<code>type</code> (String, Integer, Float, Symbol, Boolean …\n"],["define_parser","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-c-define_parser","(name, start_re, span_start = nil, meth_name = \"parse_#{name}\")","<p>Add a parser method\n<p>with the given <code>name</code>,\n<p>using <code>start_re</code> as start regexp\n"],["defined?","Kramdown::Options","Kramdown/Options.html#method-c-defined-3F","(name)","<p>Return <code>true</code> if an option called <code>name</code> is defined.\n"],["definitions","Kramdown::Options","Kramdown/Options.html#method-c-definitions","()","<p>Return all option definitions.\n"],["delete","Kramdown::Utils::OrderedHash","Kramdown/Utils/OrderedHash.html#method-i-delete","(key)","<p>Delete the <code>key</code>.\n"],["dl_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-dl_options","(el, opts)",""],["document_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-document_options","(root)","<p>Return a hash with options that are suitable for Prawn::Document.new.\n<p>Used in #setup_document.\n"],["dt_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-dt_options","(el, opts)",""],["each","Kramdown::Utils::OrderedHash","Kramdown/Utils/OrderedHash.html#method-i-each","()","<p>Iterate over the stored keys in insertion order.\n"],["em_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-em_options","(el, opts)",""],["embed_image","Kramdown::Converter::Pdf::PrawnDocumentExtension","Kramdown/Converter/Pdf/PrawnDocumentExtension.html#method-i-embed_image","(pdf_obj, info, options)","<p>Override image embedding method for adding image positions to\n#image_floats.\n"],["entity","Kramdown::Utils::Entities","Kramdown/Utils/Entities.html#method-c-entity","(point_or_name)","<p>Return the entity for the given code point or name\n<code>point_or_name</code>.\n"],["entity","Kramdown::Utils::Entities","Kramdown/Utils/Entities.html#method-i-entity","(point_or_name)","<p>Return the entity for the given code point or name\n<code>point_or_name</code>.\n"],["entity_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-entity_options","(el, opts)",""],["entity_to_latex","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-entity_to_latex","(entity)",""],["entity_to_str","Kramdown::Utils::Html","Kramdown/Utils/Html.html#method-i-entity_to_str","(e, original = nil)","<p>Convert the entity <code>e</code> to a string. The optional parameter\n<code>original</code> may contain the original representation …\n"],["escape","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-escape","(str)","<p>Escape the special LaTeX characters in the string <code>str</code>.\n"],["escape_html","Kramdown::Utils::Html","Kramdown/Utils/Html.html#method-i-escape_html","(str, type = :all)","<p>Escape the special HTML characters in the string <code>str</code>. The\nparameter <code>type</code> specifies what is escaped: :all …\n"],["extract_code_language","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-i-extract_code_language","(attr)","<p>Extract the code block/span language from the attributes.\n"],["extract_code_language!","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-i-extract_code_language-21","(attr)","<p>See #extract_code_language\n<p><strong>Warning</strong>: This version will modify the given attributes if\na language is present. …\n"],["extract_string","Kramdown::Parser::Base","Kramdown/Parser/Base.html#method-i-extract_string","(range, strscan)","<p>Extract the part of the StringScanner <code>strscan</code> backed string\nspecified by the <code>range</code>. This method works …\n"],["finish_document","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-finish_document","(root)","<p>Used in #render_root.\n"],["footnote_content","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-footnote_content","()","<p>Return a HTML ordered list with the footnote content for the used\nfootnotes.\n"],["format_as_block_html","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-format_as_block_html","(name, attr, body, indent)","<p>Format the given element as block HTML.\n"],["format_as_indented_block_html","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-format_as_indented_block_html","(name, attr, body, indent)","<p>Format the given element as block HTML with a newline after the start tag\nand indentation before the …\n"],["format_as_span_html","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-format_as_span_html","(name, attr, body)","<p>Format the given element as span HTML.\n"],["format_math","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-i-format_math","(el, opts = {})","<p>Format the given math element with the math engine configured through the\noption &#39;math_engine&#39;. …\n"],["generate_id","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-i-generate_id","(str)","<p>Generate an unique alpha-numeric ID from the the string <code>str</code>\nfor use as a header ID.\n<p>Uses the option <code>auto_id_prefix</code> …\n"],["generate_toc_tree","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-generate_toc_tree","(toc, type, attr)","<p>Generate and return an element tree for the table of contents.\n"],["get_template","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-c-get_template","(template)","<p>Return the template specified by <code>template</code>.\n"],["handle_extension","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-handle_extension","(name, opts, body, type, line_no = nil)",""],["handle_html_start_tag","Kramdown::Parser::Html::Parser","Kramdown/Parser/Html/Parser.html#method-i-handle_html_start_tag","(line = nil)","<p>Process the HTML start tag that has already be scanned/checked via @src.\n<p>Does the common processing steps …\n"],["handle_kramdown_html_tag","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-handle_kramdown_html_tag","(el, closed, handle_body)",""],["handle_raw_html_tag","Kramdown::Parser::Html::Parser","Kramdown/Parser/Html/Parser.html#method-i-handle_raw_html_tag","(name)","<p>Handle the raw HTML tag at the current position.\n"],["has_key?","Kramdown::Utils::OrderedHash","Kramdown/Utils/OrderedHash.html#method-i-has_key-3F","(key)","<p>Return <code>true</code> if the hash contains the key.\n"],["has_parser?","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-c-has_parser-3F","(name)","<p>Return <code>true</code> if there is a parser called <code>name</code>.\n"],["header_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-header_options","(el, opts)",""],["highlight_code","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-i-highlight_code","(text, lang, type, opts = {})","<p>Highlight the given <code>text</code> in the language <code>lang</code>\nwith the syntax highlighter configured through the option …\n"],["hr_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-hr_options","(el, opts)",""],["html_attributes","Kramdown::Utils::Html","Kramdown/Utils/Html.html#method-i-html_attributes","(attr)","<p>Return the HTML representation of the attributes <code>attr</code>.\n"],["image_floats","Kramdown::Converter::Pdf::PrawnDocumentExtension","Kramdown/Converter/Pdf/PrawnDocumentExtension.html#method-i-image_floats","()",""],["img_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-img_options","(el, opts)",""],["in_toc?","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-i-in_toc-3F","(el)","<p>Return <code>true</code> if the header element <code>el</code> should be\nused for the table of contents (as specified by the <code>toc_levels</code>\n…\n"],["inner","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-inner","(el, indent)","<p>Return the converted content of the children of <code>el</code> as a\nstring. The parameter <code>indent</code> has to be the amount …\n"],["inner","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-inner","(el, opts)","<p>Return the converted content of the children of <code>el</code> as a\nstring.\n"],["inner","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-inner","(el, opts)","<p>Render the children of this element with the given options and return the\nresults as array.\n<p>Each time …\n"],["latex_environment","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-latex_environment","(type, el, text)","<p>Wrap the <code>text</code> inside a LaTeX environment of type\n<code>type</code>. The element <code>el</code> is passed on to the method\n#attribute_list …\n"],["latex_link_target","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-latex_link_target","(el, add_label = false)","<p>Return a string containing a valid hypertarget command if the element has\nan ID defined, or <code>nil</code> otherwise. …\n"],["li_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-li_options","(el, opts)",""],["math_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-math_options","(el, opts)",""],["merge","Kramdown::Options","Kramdown/Options.html#method-c-merge","(hash)","<p>Merge the #defaults Hash with the <strong>parsed</strong> options from the\ngiven Hash, i.e. only valid option names are …\n"],["merge!","Kramdown::Utils::OrderedHash","Kramdown/Utils/OrderedHash.html#method-i-merge-21","(other)",""],["method_missing","Kramdown::Document","Kramdown/Document.html#method-i-method_missing","(id, *attr, &block)","<p>Check if a method is invoked that begins with <code>to_</code> and if so,\ntry to instantiate a converter class (i.e. …\n"],["new","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-c-new","(root, options)","<p>Initialize the converter with the given <code>root</code> element and\n<code>options</code> hash.\n"],["new","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-c-new","(root, options)","<p>Initialize the HTML converter with the given Kramdown document\n<code>doc</code>.\n"],["new","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-c-new","(root, options)","<p>Initialize the LaTeX converter with the <code>root</code> element and the\nconversion <code>options</code>.\n"],["new","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-c-new","(root, options)",""],["new","Kramdown::Converter::RemoveHtmlTags","Kramdown/Converter/RemoveHtmlTags.html#method-c-new","(root, options)",""],["new","Kramdown::Converter::Toc","Kramdown/Converter/Toc.html#method-c-new","(root, options)",""],["new","Kramdown::Document","Kramdown/Document.html#method-c-new","(source, options = {})","<p>Create a new Kramdown document from the string <code>source</code> and use\nthe provided <code>options</code>. The options that …\n"],["new","Kramdown::Element","Kramdown/Element.html#method-c-new","(type, value = nil, attr = nil, options = nil)","<p>Create a new Element object of type <code>type</code>. The optional\nparameters <code>value</code>, <code>attr</code> and <code>options</code>\ncan also be …\n"],["new","Kramdown::Parser::Base","Kramdown/Parser/Base.html#method-c-new","(source, options)","<p>Initialize the parser object with the <code>source</code> string and the\nparsing <code>options</code>.\n<p>The @root element, the @warnings …\n"],["new","Kramdown::Parser::GFM","Kramdown/Parser/GFM.html#method-c-new","(source, options)",""],["new","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-c-new","(source, options)","<p>Create a new Kramdown parser object with the given <code>options</code>.\n"],["new","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-c-new","(source, options)","<p>Initialize the parser object with the <code>source</code> string and the\nparsing <code>options</code>.\n<p>The @root element, the @warnings …\n"],["new","Kramdown::Utils::OrderedHash","Kramdown/Utils/OrderedHash.html#method-c-new","()","<p>Initialize the OrderedHash object.\n"],["new","Kramdown::Utils::StringScanner","Kramdown/Utils/StringScanner.html#method-c-new","(string, start_line_number = 1)","<p>Takes the start line number as optional second argument.\n<p>Note: The original second argument is no longer …\n"],["new_block_el","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-new_block_el","(*args)","<p>Create a new block-level element, taking care of applying a preceding block\nIAL if it exists. This method …\n"],["normalize_abbreviation_key","Kramdown::Converter::Latex","Kramdown/Converter/Latex.html#method-i-normalize_abbreviation_key","(key)","<p>Normalize the abbreviation key so that it only contains allowed ASCII\ncharacter\n"],["normalize_link_id","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-normalize_link_id","(id)","<p>Normalize the link identifier.\n"],["obfuscate","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-obfuscate","(text)","<p>Obfuscate the <code>text</code> by using HTML entities.\n"],["ol_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-ol_options","(el, opts)",""],["options","Kramdown::Converter::SyntaxHighlighter::Coderay","Kramdown/Converter/SyntaxHighlighter/Coderay.html#method-c-options","(converter, type)",""],["options","Kramdown::Element","Kramdown/Element.html#method-i-options","()","<p>The options hash for the element. It is used for storing arbitray options.\n"],["output_header_level","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-i-output_header_level","(level)","<p>Return the output header level given a level.\n<p>Uses the <code>header_offset</code> option for adjusting the header level.\n…\n"],["p_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-p_options","(el, opts)",""],["parse","Kramdown::Options","Kramdown/Options.html#method-c-parse","(name, data)","<p>Parse the given value <code>data</code> as if it was a value for the option\n<code>name</code> and return the parsed value with …\n"],["parse","Kramdown::Parser::Base","Kramdown/Parser/Base.html#method-c-parse","(source, options = {})","<p>Parse the <code>source</code> string into an element tree, possibly using\nthe parsing <code>options</code>, and return the root …\n"],["parse","Kramdown::Parser::Base","Kramdown/Parser/Base.html#method-i-parse","()","<p>Parse the source string into an element tree.\n<p>The parsing code should parse the source provided in @source …\n"],["parse","Kramdown::Parser::GFM","Kramdown/Parser/GFM.html#method-i-parse","()",""],["parse","Kramdown::Parser::Html","Kramdown/Parser/Html.html#method-i-parse","()","<p>Parse the source string provided on initialization as HTML document.\n"],["parse","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse","()","<p>The source string provided on initialization is parsed into the @root\nelement.\n"],["parse_abbrev_definition","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_abbrev_definition","()","<p>Parse the link definition at the current location.\n"],["parse_attribute_list","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_attribute_list","(str, opts)","<p>Parse the string <code>str</code> and extract all attributes and add all\nfound attributes to the hash <code>opts</code>.\n"],["parse_atx_header","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_atx_header","()","<p>Parse the Atx header at the current location.\n"],["parse_autolink","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_autolink","()","<p>Parse the autolink at the current location.\n"],["parse_blank_line","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_blank_line","()","<p>Parse the blank line at the current postition.\n"],["parse_block_extensions","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_block_extensions","()","<p>Parse one of the block extensions (ALD, block IAL or generic extension) at\nthe current location.\n"],["parse_block_html","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_block_html","()","<p>Parse the HTML at the current position as block-level HTML.\n"],["parse_block_math","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_block_math","()","<p>Parse the math block at the current location.\n"],["parse_blockquote","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_blockquote","()","<p>Parse the blockquote at the current location.\n"],["parse_blocks","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_blocks","(el, text = nil)","<p>Parse all block-level elements in <code>text</code> into the element\n<code>el</code>.\n"],["parse_codeblock","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_codeblock","()","<p>Parse the indented codeblock at the current location.\n"],["parse_codeblock_fenced","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_codeblock_fenced","()","<p>Parse the fenced codeblock at the current location.\n"],["parse_codespan","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_codespan","()","<p>Parse the codespan at the current scanner location.\n"],["parse_definition_list","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_definition_list","()","<p>Parse the ordered or unordered list at the current location.\n"],["parse_emphasis","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_emphasis","()","<p>Parse the emphasis at the current location.\n"],["parse_eob_marker","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_eob_marker","()","<p>Parse the EOB marker at the current location.\n"],["parse_escaped_chars","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_escaped_chars","()","<p>Parse the backslash-escaped character at the current location.\n"],["parse_extension_start_tag","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_extension_start_tag","(type)","<p>Parse the generic extension at the current point. The parameter\n<code>type</code> can either be :block or :span depending …\n"],["parse_first_list_line","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_first_list_line","(indentation, content)","<p>Used for parsing the first line of a list item or a definition, i.e. the\nline with list item marker or …\n"],["parse_footnote_definition","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_footnote_definition","()","<p>Parse the foot note definition at the current location.\n"],["parse_footnote_marker","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_footnote_marker","()","<p>Parse the footnote marker at the current location.\n"],["parse_horizontal_rule","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_horizontal_rule","()","<p>Parse the horizontal rule at the current location.\n"],["parse_html_attributes","Kramdown::Parser::Html::Parser","Kramdown/Parser/Html/Parser.html#method-i-parse_html_attributes","(str, line = nil)","<p>Parses the given string for HTML attributes and returns the resulting hash.\n<p>If the optional <code>line</code> parameter …\n"],["parse_html_entity","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_html_entity","()","<p>Parse the HTML entity at the current location.\n"],["parse_inline_math","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_inline_math","()","<p>Parse the inline math at the current location.\n"],["parse_line_break","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_line_break","()","<p>Parse the line break at the current location.\n"],["parse_link","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_link","()","<p>Parse the link at the current scanner position. This method is used to\nparse normal links as well as …\n"],["parse_link_definition","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_link_definition","()","<p>Parse the link definition at the current location.\n"],["parse_list","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_list","()","<p>Parse the ordered or unordered list at the current location.\n"],["parse_paragraph","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_paragraph","()","<p>Parse the paragraph at the current location.\n"],["parse_raw_html","Kramdown::Parser::Html::Parser","Kramdown/Parser/Html/Parser.html#method-i-parse_raw_html","(el, &block)","<p>Parse raw HTML from the current source position, storing the found elements\nin <code>el</code>. Parsing continues …\n"],["parse_setext_header","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_setext_header","()","<p>Parse the Setext header at the current location.\n"],["parse_smart_quotes","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_smart_quotes","()","<p>Parse the smart quotes at current location.\n"],["parse_span_extensions","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_span_extensions","()","<p>Parse the extension span at the current location.\n"],["parse_span_html","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_span_html","()","<p>Parse the HTML at the current position as span-level HTML.\n"],["parse_spans","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_spans","(el, stop_re = nil, parsers = nil, text_type = @text_type)","<p>Parse all span-level elements in the source string of @src into\n<code>el</code>.\n<p>If the parameter <code>stop_re</code> (a regexp) …\n"],["parse_table","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_table","()","<p>Parse the table at the current location.\n"],["parse_typographic_syms","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-parse_typographic_syms","()","<p>Parse the typographic symbols at the current location.\n"],["parser","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-c-parser","(name = nil)","<p>Return the Data structure for the parser <code>name</code>.\n"],["pos=","Kramdown::Utils::StringScanner","Kramdown/Utils/StringScanner.html#method-i-pos-3D","(pos)","<p>Sets the byte position of the scan pointer.\n<p>Note: This also resets some internal variables, so always …\n"],["prepare_options","Kramdown::Converter::SyntaxHighlighter::Coderay","Kramdown/Converter/SyntaxHighlighter/Coderay.html#method-c-prepare_options","(converter)",""],["preview_string","Kramdown::Converter::MathEngine::Mathjax","Kramdown/Converter/MathEngine/Mathjax.html#method-c-preview_string","(converter, el, opts)",""],["remove_footnotes","Kramdown::Converter::Html","Kramdown/Converter/Html.html#method-i-remove_footnotes","(elements)","<p>Remove all footnotes from the given elements.\n"],["render_a","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_a","(el, opts)",""],["render_abbreviation","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_abbreviation","(el, opts)",""],["render_blockquote","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_blockquote","(el, opts)",""],["render_br","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_br","(el, opts)",""],["render_codeblock","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_codeblock","(el, opts)",""],["render_codespan","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_codespan","(el, opts)",""],["render_dd","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_dd","(el, opts)",""],["render_dl","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_dl","(el, opts)",""],["render_dt","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_dt","(el, opts)",""],["render_em","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_em","(el, opts)",""],["render_entity","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_entity","(el, opts)",""],["render_header","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_header","(el, opts)",""],["render_hr","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_hr","(el, opts)",""],["render_li","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_li","(el, opts)",""],["render_math","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_math","(el, opts)",""],["render_ol","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_ol","(el, opts)",""],["render_p","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_p","(el, opts)",""],["render_padded_and_formatted_text","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_padded_and_formatted_text","(el, opts)","<p>Render the children of the given element as formatted text and respect the\ntop/bottom padding (see #with_block_padding …\n"],["render_root","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_root","(root, opts)",""],["render_smart_quote","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_smart_quote","(el, opts)",""],["render_standalone_image","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_standalone_image","(el, opts)",""],["render_strong","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_strong","(el, opts)",""],["render_table","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_table","(el, opts)",""],["render_text","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_text","(el, opts)",""],["render_typographic_sym","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_typographic_sym","(el, opts)",""],["render_ul","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-render_ul","(el, opts)",""],["replace_abbreviations","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-replace_abbreviations","(el, regexps = nil)","<p>Replace the abbreviation text with elements.\n"],["reset_env","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-reset_env","(opts = {})","<p>Reset the current parsing environment. The parameter <code>env</code> can\nbe used to set initial values for one or …\n"],["restore_env","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-restore_env","(env)","<p>Restore the current parsing environment.\n"],["revert_pos","Kramdown::Utils::StringScanner","Kramdown/Utils/StringScanner.html#method-i-revert_pos","(data)","<p>Revert the position to one saved by #save_pos.\n"],["root_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-root_options","(root, opts)",""],["save_env","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-save_env","()","<p>Return the current parsing environment.\n"],["save_pos","Kramdown::Utils::StringScanner","Kramdown/Utils/StringScanner.html#method-i-save_pos","()","<p>Return information needed to revert the byte position of the string scanner\nin a performant way.\n<p>The returned …\n"],["setup_document","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-setup_document","(root)","<p>Create a Prawn::Document object and return it.\n<p>Can be used to define repeatable content or register fonts. …\n"],["simple_array_validator","Kramdown::Options","Kramdown/Options.html#method-c-simple_array_validator","(val, name, size)","<p>Ensures that the option value <code>val</code> for the option called\n<code>name</code> is a valid array. The parameter <code>val</code> can …\n"],["simple_hash_validator","Kramdown::Options","Kramdown/Options.html#method-c-simple_hash_validator","(val, name)","<p>Ensures that the option value <code>val</code> for the option called\n<code>name</code> is a valid hash. The parameter <code>val</code> can be …\n"],["smart_quote_entity","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-i-smart_quote_entity","(el)","<p>Return the entity that represents the given smart_quote element.\n"],["smart_quote_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-smart_quote_options","(el, opts)",""],["snake_case","Kramdown::Utils","Kramdown/Utils.html#method-c-snake_case","(name)","<p>Treat <code>name</code> as if it were camelized (e.g. CamelizedName) and\nsnake-case it (e.g. camelized_name).\n"],["span_parser_regexps","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-span_parser_regexps","(parsers = @span_parsers)","<p>Create the needed span parser regexps.\n"],["str_to_sym","Kramdown::Options","Kramdown/Options.html#method-c-str_to_sym","(data)","<p>Converts the given String <code>data</code> into a Symbol or\n<code>nil</code> with the following provisions:\n<p>A leading colon is …\n"],["strong_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-strong_options","(el, opts)",""],["table_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-table_options","(el, opts)",""],["text_hash","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-text_hash","(text, opts, squeeze_whitespace = true)","<p>Helper function that returns a hash with valid “formatted text” options.\n<p>The <code>text</code> parameter …\n"],["text_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-text_options","(el, opts)",""],["try_require","Kramdown::Document","Kramdown/Document.html#method-i-try_require","(type, name)","<p>Try requiring a parser or converter class and don&#39;t raise an error if\nthe file is not found.\n"],["typographic_sym_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-typographic_sym_options","(el, opts)",""],["ul_options","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-ul_options","(el, opts)",""],["update_attr_with_ial","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-update_attr_with_ial","(attr, ial)","<p>Update the given attributes hash <code>attr</code> with the information\nfrom the inline attribute list <code>ial</code> and all …\n"],["update_ial_with_ial","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-update_ial_with_ial","(ial, opts)","<p>Update the <code>ial</code> with the information from the inline attribute\nlist <code>opts</code>.\n"],["update_link_definitions","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-update_link_definitions","(link_defs)","<p>Update the parser specific link definitions with the data from\n<code>link_defs</code> (the value of the :link_defs …\n"],["update_raw_header_text","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-update_raw_header_text","(header)","<p>Update the raw header text for automatic ID generation.\n"],["update_tree","Kramdown::Parser::Kramdown","Kramdown/Parser/Kramdown.html#method-i-update_tree","(element)","<p>Update the tree by parsing all :<code>raw_text</code> elements with the\nspan-level parser (resets the environment) …\n"],["warning","Kramdown::Converter::Base","Kramdown/Converter/Base.html#method-i-warning","(text)","<p>Add the given warning <code>text</code> to the warning array.\n"],["warning","Kramdown::Parser::Base","Kramdown/Parser/Base.html#method-i-warning","(text)","<p>Add the given warning <code>text</code> to the warning array.\n"],["with_block_padding","Kramdown::Converter::Pdf","Kramdown/Converter/Pdf.html#method-i-with_block_padding","(el, opts)","<p>Move the prawn document cursor down before and/or after yielding the given\nblock.\n<p>The :top_padding and …\n"]]}}